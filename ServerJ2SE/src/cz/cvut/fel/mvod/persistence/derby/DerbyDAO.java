/*
 * © 2010, Jakub Valenta
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the Jakub Valenta
 * nor the names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * This software is provided by the copyright holders and contributors “as is” and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the foundation or contributors be liable for any direct, indirect,
 * incidental, special, exemplary, or consequential damages (including, but not limited to,
 * procurement of substitute goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether in contract, strict
 * liability, or tort (including negligence or otherwise) arising in any way out of the use
 * of this software, even if advised of the possibility of such damage.
 */

package cz.cvut.fel.mvod.persistence.derby;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Provides for basic functionality for executing sql commands.
 * @author jakub
 */
abstract class DerbyDAO {

	/**
	 * Prepare statement for execution on connected database.
	 * @param statement SQL query
	 * @return prepared statement
	 * @throws DerbyDatabaseException if database is not connected or SQL errror occurs
	 */
	public PreparedStatement prepareStatement(String statement) throws DerbyDatabaseException{
		return DerbySqlConnection.getInstance().prepareStatement(statement);
	}

	/**
	 * Execute prepared statement with specified parameters.
	 * Only update, save and delete queries may be executed by this method.
	 * In other cases use executeQuery.
	 * @param statement prepared statement
	 * @param attributes for prepared statement
	 * @return autogenerated attributes(if exists)
	 * @throws DerbyDatabaseException if database is not connected, or SQL error occurs
	 */
	public ResultSet execute(PreparedStatement statement, Object[] attributes) throws DerbyDatabaseException {
		setAttributes(statement, attributes);
		try {
			statement.executeUpdate();
			return statement.getGeneratedKeys();
		} catch(SQLException ex) {
			throw new DerbyDatabaseException(ex);
		}
	}

	/**
	 * Execute prepared statement with specified parameters.
	 * Only update, save and delete queries may be executed by this method.
	 * In other cases use {@link #executeQuery(java.sql.PreparedStatement, java.lang.Object[])}.
	 * It does the same as calling method
	 * {@link #execute(java.sql.PreparedStatement, java.lang.Object[])} with array
	 * of length 1.
	 * @param statement prepared statement
	 * @param attribute for prepared statement
	 * @return autogenerated attributes(if exists)
	 * @throws DerbyDatabaseException if database is not connected, or SQL error occurs
	 */
	public ResultSet execute(PreparedStatement statement, Object attribute) throws DerbyDatabaseException {
		Object[] attributes = {attribute};
		return execute(statement, attributes);
	}

	/**
	 * Execute prepared statement.
	 * Only update, save and delete queries may be executed by this method.
	 * In other cases use{@link #executeQuery(java.sql.PreparedStatement, java.lang.Object[])}.
	 * It does the same as calling method
	 * {@link #execute(java.sql.PreparedStatement, java.lang.Object[])} with array
	 * of length 0.
	 * @param statement prepared statement
	 * @return autogenerated attributes(if exists)
	 * @throws DerbyDatabaseException if database is not connected, or SQL error occurs
	 */
	public ResultSet execute(PreparedStatement statement) throws DerbyDatabaseException {
		return execute(statement, new Object[0]);
	}

	/**
	 * Execute prepared statement with specified attributes.
	 * @param statement prepared statement
	 * @param attributes of statement
	 * @return selected rows (if exists)
	 * @throws DerbyDatabaseException if database is not connected, or SQL error occurs
	 */
	public ResultSet executeQuery(PreparedStatement statement, Object[] attributes) throws DerbyDatabaseException {
		setAttributes(statement, attributes);
		try {
			return statement.executeQuery();
		} catch(SQLException ex) {
			throw new DerbyDatabaseException(ex);
		}
	}

	/**
	 * Execute prepared statement with specified attribute.
	 * It does the same as calling method {@link #execute(java.sql.PreparedStatement, java.lang.Object[]) }
	 * with array of length 1 as attribute.
	 * @param statement prepared statement
	 * @param attribute of statement
	 * @return selected rows (if exists)
	 * @throws DerbyDatabaseException if database is not connected, or SQL error occurs
	 */
	public ResultSet executeQuery(PreparedStatement statement, Object attribute) throws DerbyDatabaseException {
		Object[] attributes = {attribute};
		return executeQuery(statement, attributes);
	}

	/**
	 * Execute prepared statement.
	 * It does the same as calling method {@link #execute(java.sql.PreparedStatement, java.lang.Object[]) }
	 * with array of length 0 as attribute.
	 * @param statement prepared statement
	 * @return selected rows (if exists)
	 * @throws DerbyDatabaseException if database is not connected, or SQL error occurs
	 */
	public ResultSet executeQuery(PreparedStatement statement) throws DerbyDatabaseException {
		return executeQuery(statement, new Object[0]);
	}

	/**
	 * Sets attributes to prepared statement.
	 * @param statement prepared statement
	 * @param attributes of statement
	 * @throws DerbyDatabaseException if database is not connected, or SQL error occurs
	 */
	private void setAttributes(PreparedStatement statement, Object[] attributes) throws DerbyDatabaseException {
		try {
			statement.clearParameters();
			for(int i = 0; i < attributes.length; i ++) {
				if(!(attributes[i] instanceof NullType)) {
					statement.setObject(i + 1, attributes[i]);
				} else {
					statement.setNull(i + 1, ((NullType)attributes[i]).type);
				}
			}
		} catch (SQLException ex) {
			throw new DerbyDatabaseException(ex);
		}
	}

}
